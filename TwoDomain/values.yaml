frontend:
  replicaCount: 1

  image:
    repository: ghcr.io/pascal-sochacki/routing-test-frontend
    pullPolicy: IfNotPresent

  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: false
    annotations: { }
    name: ""

  podAnnotations: { }

  podSecurityContext: { }

  securityContext: { }

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "letsencrypt"
    hosts:
      - host: twodomain.sochacki.dev
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - twodomain.sochacki.dev
        secretName: twodomain-tls

  resources: { }

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  nodeSelector:
    app.kubernetes.io/instance: twodomains
    app.kubernetes.io/name: twodomain-frontend

  tolerations: [ ]

  affinity: { }

backend:
  replicaCount: 1

  image:
    repository: ghcr.io/pascal-sochacki/routing-test-backend
    pullPolicy: IfNotPresent

  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: false
    annotations: { }
    name: ""

  podAnnotations: { }

  podSecurityContext: { }

  securityContext: { }

  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: true
    className: ""
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: "letsencrypt"
    hosts:
      - host: api.twodomain.sochacki.dev
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - api.twodomain.sochacki.dev
        secretName: api.twodomain-tls

  resources: { }

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  nodeSelector:
    app.kubernetes.io/instance: twodomains
    app.kubernetes.io/name: twodomain-backend


  tolerations: [ ]

  affinity: { }

