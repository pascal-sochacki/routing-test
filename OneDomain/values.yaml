ingress:
  enabled: true
  className: ""
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: "letsencrypt"
  hosts:
    - host: onedomain.sochacki.dev
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              port: 80
              name: onedomains-frontend
        - path: /api
          pathType: Prefix
          backend:
            service:
              port: 80
              name: onedomains-backend
  tls:
    - hosts:
        - onedomain.sochacki.dev
      secretName: onedomain-tls


frontend:
  replicaCount: 1

  image:
    repository: ghcr.io/pascal-sochacki/routing-test-frontend
    pullPolicy: IfNotPresent
    tag: 0.0.1

  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: false
    annotations: { }
    name: ""

  podAnnotations: { }

  podSecurityContext: { }

  securityContext: { }

  service:
    type: ClusterIP
    port: 80

  resources: { }

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  nodeSelector:
    app.kubernetes.io/instance: onedomains
    app.kubernetes.io/name: onedomain-frontend

  tolerations: [ ]

  affinity: { }

backend:
  replicaCount: 1

  image:
    repository: ghcr.io/pascal-sochacki/routing-test-backend
    pullPolicy: IfNotPresent

  imagePullSecrets: [ ]
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    create: false
    annotations: { }
    name: ""

  podAnnotations: { }

  podSecurityContext: { }

  securityContext: { }

  service:
    type: ClusterIP
    port: 80

  resources: { }

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80

  nodeSelector:
    app.kubernetes.io/instance: onedomains
    app.kubernetes.io/name: onedomain-backend


  tolerations: [ ]

  affinity: { }

